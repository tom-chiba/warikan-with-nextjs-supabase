---
alwaysApply: true
description: 全開発をt_wada流TDD（小さなベイビーステップ）で進めるためのガイド
---

# t_wada流TDD ルール（常時適用）

このプロジェクトの開発は、常に t_wada 流の TDD を採用します。小さなベイビーステップで Red → Green → Refactor のサイクルを高速に回し、テストが設計を導くように進めます。

## 原則
- Red（失敗するテストを先に書く）
- Green（最短でテストを通す：仮実装→明白な実装の順）
- Refactor（重複の除去・意図の明確化・命名の改善）。「同じことを3回書いたら抽象化」
- 小さな歩幅：テストも実装も極小に保ち、常に安全に進む
- 疑いはテストで返す：仕様の曖昧さはまずテストに落とし込む
- 外部との境界はモック／フェイクで隔離し、ドメインは純粋に保つ

## 進め方（毎サイクル）
1. 最も小さな振る舞いを1つだけ選び、失敗を確認できるテストを書く（コンパイル失敗も可）
2. 直ちに実行して Red を確認
3. 最短距離で Green（仮実装でも可）。過剰実装は禁止
4. リファクタリング：命名、重複除去、意図の明確化、テストの可読性向上
5. もう一度テストを全て回す
6. コミットは粒度を保つ：Red/Green/Refactor ごとにコミット
7. 次に小さなテストへ進む

## テスト実行ポリシー
- 基本コマンドは `npm run test:comp` を用いる
- Red, Green, Refactor 各フェイズ直後に必ず `npm run test:comp` を実行し、期待通りの結果であることを確認する
- 迅速な反復のため、必要に応じてウォッチモード等を活用しても良いが、各フェイズの明確な確認は省略しない

## テスト設計の指針
- 1つのテストは1つの意図（Arrange/Act/Assert を明確に）
- 観察可能な振る舞いに着目（内部実装詳細への過度な依存を避ける）
- 三角測量：過剰な一般化を避け、複数の具体例で振る舞いを固めてから抽象化
- テストデータは最小で十分なものに限定。境界値を優先

## Next.js / TypeScript 向け実務ルール
- React コンポーネント：React Testing Library を用いたユーザ視点の検証を優先
- サーバ/ユーティリティ：入出力中心の純粋関数テストを優先
- Supabase 等の外部I/O：境界（ポート/アダプタ）で抽象化し、テストではモック/フェイクを注入
- 型は仕様の一部。型エラーは Red と見なす

## 命名と構成
- テスト名は振る舞いを日本語または自然文で表す
- ファイルは被検体と同階層に配置し、1テストファイル=1対象を原則
- 固定値/ビルダーは共通のヘルパに抽出し重複を排除

## 実行関連（参考）
- パッケージやスクリプトは [package.json](mdc:package.json) を参照
- 設定やプロジェクト説明は [README.md](mdc:README.md) を参照

## 禁則事項
- テストなしの実装追加
- 複数の意図を1つのテストに詰め込む
- 大きな一括リファクタリング（Greenを壊す変更）
- 外部サービス直叩きのユニットテスト

このルールは常時適用されます。例外が必要な場合は、理由を明記した上で、まずテストで意図を示してください。